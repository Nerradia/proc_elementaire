entier a_cos; 
entier a_sin; 
entier a;
entier b; 
entier c;

reel decalage_x; 
reel decalage_y; 
reel x1_o; 
reel y1_o;
reel z1_o;
reel x2_o; 
reel y2_o;
reel z2_o;
reel x3_o; 
reel y3_o;
reel z3_o;
reel x4_o; 
reel y4_o;
reel z4_o;
reel x5_o; 
reel y5_o;
reel z5_o;
reel x6_o; 
reel y6_o;
reel z6_o;
reel x7_o; 
reel y7_o;
reel z7_o;
reel x8_o; 
reel y8_o;
reel z8_o;
reel x1; 
reel y1;
reel x2; 
reel y2;
reel x3; 
reel y3;
reel x4; 
reel y4;
reel x5; 
reel y5;
reel x6; 
reel y6;
reel x7; 
reel y7;
reel x8; 
reel y8;
reel xx; 
reel xy;
reel yx;
reel yy;
reel zx;
reel zy;
reel temp1;
reel sa; 
reel sb; 
reel sc; 
reel ca; 
reel cb; 
reel cc; 

entier retour;

retour = 1;

x1_o = 100.; 
y1_o = 100.;
z1_o = -100.;

x2_o = 100.;
y2_o = 100.;
z2_o = 100.;

x3_o = -100.;
y3_o = 100.;
z3_o = 100.;

x4_o = -100.;
y4_o = 100.;
z4_o = -100.;

x5_o = 100.;
y5_o = -100.;
z5_o = -100.;

x6_o = 100.;
y6_o = -100.;
z6_o = 100.;

x7_o = -100.;
y7_o = -100.;
z7_o = 100.;

x8_o = -100.;
y8_o = -100.;
z8_o = -100.;

retour = 1;

a_cos = 1;
a_sin = 1;


ecrire_a(1, 8241);
tant_que(1 < 2)


//  a = 0;
//  tant_que(a < 100000) 
//    a = a + 1;
//  fin_tant_que;

  a_cos = a_cos + 1;
  a_sin = a_sin + 1;
  
  tant_que (a_sin > 360)
    a_sin = a_sin - 360;
  fin_tant_que;
  
  tant_que (a_cos > 270)
    a_cos = a_cos - 360;
  fin_tant_que;

  b = 20;
  c = 5;
  decalage_x = 320.; 
  decalage_y = 240.; 

  sa = sin(a_sin); 
  sb = sin(b); 
  sc = sin(c);
  ca = cos(a_cos);
  cb = cos(b);
  cc = cos(c);

  xx    = cc * ca;    
  temp1 = sc * sa;
  temp1 = temp1 * sb;
  xx    = xx - temp1;

  temp1 = cc * sa; 
  xy    = temp1 * sb;
  temp1 = sc * ca;
  xy    = xy + temp1; 
  
  temp1 = sa * cc; 
  yx    = 0. - temp1; 
  temp1 = sc * ca;
  temp1 = sc * sb;
  yx    = yx - temp1;

  temp1 = cc * ca; 
  yy    = temp1 * sb;
  temp1 = sc * sa;
  yy    = yy - temp1; 
  
  zx    = sc * cb;    
  zx    = 0. - zx;
  
  zy    = cc * cb;    
  zy    = zy * cb;
  
  x1    = x1_o * xx; 
  temp1 = y1_o * yx;
  x1    = x1 + temp1;
  temp1 = z1_o * zx;
  x1    = x1 + temp1;
  
  y1    = x1_o * xy;
  temp1 = y1_o * yy;
  y1    = y1 + temp1;
  temp1 = z1_o * zy;
  y1    = y1 + temp1;
  
  x2    = x2_o * xx; 
  temp1 = y2_o * yx;
  x2    = x2 + temp1;
  temp1 = z2_o * zx;
  x2    = x2 + temp1;

  y2    = x2_o * xy;
  temp1 = y2_o * yy;
  y2    = y2 + temp1;
  temp1 = z2_o * zy;
  y2    = y2 + temp1;
  
  x3    = x3_o * xx; 
  temp1 = y3_o * yx;
  x3    = x3 + temp1;
  temp1 = z3_o * zx;
  x3    = x3 + temp1;

  y3    = x3_o * xy;
  temp1 = y3_o * yy;
  y3    = y3 + temp1;
  temp1 = z3_o * zy;
  y3    = y3 + temp1;
  
  x4    = x4_o * xx; 
  temp1 = y4_o * yx;
  x4    = x4 + temp1;
  temp1 = z4_o * zx;
  x4    = x4 + temp1;
  
  y4    = x4_o * xy;
  temp1 = y4_o * yy;
  y4    = y4 + temp1;
  temp1 = z4_o * zy;
  y4    = y4 + temp1;
  
  x5    = x5_o * xx; 
  temp1 = y5_o * yx;
  x5    = x5 + temp1;
  temp1 = z5_o * zx;
  x5    = x5 + temp1;
  
  y5    = x5_o * xy;
  temp1 = y5_o * yy;
  y5    = y5 + temp1;
  temp1 = z5_o * zy;
  y5    = y5 + temp1;
  
  x6    = x6_o * xx;
  temp1 = y6_o * yx;
  x6    = x6 + temp1;
  temp1 = z6_o * zx;
  x6    = x6 + temp1;
  
  y6    = x6_o * xy;
  temp1 = y6_o * yy;
  y6    = y6 + temp1;
  temp1 = z6_o * zy;
  y6    = y6 + temp1;
  
  x7    = x7_o * xx; 
  temp1 = y7_o * yx;
  x7    = x7 + temp1;
  temp1 = z7_o * zx;
  x7    = x7 + temp1;
  
  y7    = x7_o * xy;
  temp1 = y7_o * yy;
  y7    = y7 + temp1;
  temp1 = z7_o * zy;
  y7    = y7 + temp1;
  
  x8    = x8_o * xx; 
  temp1 = y8_o * yx;
  x8    = x8 + temp1;
  temp1 = z8_o * zx;
  x8    = x8 + temp1;
  
  y8    = x8_o * xy;
  temp1 = y8_o * yy;
  y8    = y8 + temp1;
  temp1 = z8_o * zy;
  y8    = y8 + temp1;

  x1 = x1 + decalage_x; 
  y1 = y1 + decalage_y;
  x2 = x2 + decalage_x;
  y2 = y2 + decalage_y;
  x3 = x3 + decalage_x;
  y3 = y3 + decalage_y;
  x4 = x4 + decalage_x;
  y4 = y4 + decalage_y;
  x5 = x5 + decalage_x;
  y5 = y5 + decalage_y;
  x6 = x6 + decalage_x;
  y6 = y6 + decalage_y;
  x7 = x7 + decalage_x;
  y7 = y7 + decalage_y;
  x8 = x8 + decalage_x;
  y8 = y8 + decalage_y;

  ecrire_a (12, 8192);

  // On attend que le GPU ait fini d'utiliser les données précédentes.
  retour = lire_a(8241)
  tant_que(retour < 1)
    retour = lire_a(8241);
  fin_tant_que;
  ecrire_a (1, 8241);

// segment 1  : S[1;2]
  ecrire_a (x1, 8193);
  ecrire_a (y1, 8194);
  ecrire_a (x2, 8195);
  ecrire_a (y2, 8196);
// segment 2  : S[1;4]
  ecrire_a (x1, 8197);
  ecrire_a (y1, 8198);
  ecrire_a (x4, 8199);
  ecrire_a (y4, 8200);
// segment 3  : S[1;5]
  ecrire_a (x1, 8201);
  ecrire_a (y1, 8202);
  ecrire_a (x5, 8203);
  ecrire_a (y5, 8204);
// segment 4  : S[2;3]
  ecrire_a (x2, 8205);
  ecrire_a (y2, 8206);
  ecrire_a (x3, 8207);
  ecrire_a (y3, 8208);
// segment 5  : S[2;6]
  ecrire_a (x2, 8209);
  ecrire_a (y2, 8210);
  ecrire_a (x6, 8211);
  ecrire_a (y6, 8212);
// segment 6  : S[3;4]
  ecrire_a (x3, 8213);
  ecrire_a (y3, 8214);
  ecrire_a (x4, 8215);
  ecrire_a (y4, 8216);
// segment 7  : S[3;7]
  ecrire_a (x3, 8217);
  ecrire_a (y3, 8218);
  ecrire_a (x7, 8219);
  ecrire_a (y7, 8220);
// segment 8  : S[4;8]
  ecrire_a (x4, 8221);
  ecrire_a (y4, 8222);
  ecrire_a (x8, 8223);
  ecrire_a (y8, 8224);
// segment 9  : S[5;8]
  ecrire_a (x5, 8225);
  ecrire_a (y5, 8226);
  ecrire_a (x8, 8227);
  ecrire_a (y8, 8228);
// segment 10 : S[5;6]
  ecrire_a (x5, 8229);
  ecrire_a (y5, 8230);
  ecrire_a (x6, 8231);
  ecrire_a (y6, 8232);
// segment 11 : S[6;7]
  ecrire_a (x6, 8233);
  ecrire_a (y6, 8234);
  ecrire_a (x7, 8235);
  ecrire_a (y7, 8236);
// segment 12 : S[7;8]
  ecrire_a (x7, 8237);
  ecrire_a (y7, 8238);
  ecrire_a (x8, 8239);
  ecrire_a (y8, 8240);


  ecrire_a (0, 8241); // Données prêtes

fin_tant_que;

